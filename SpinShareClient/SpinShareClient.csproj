<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<OutputType>Exe</OutputType>
		<TargetFramework>net8.0</TargetFramework>
		<Platforms>AnyCPU</Platforms>
		<Version>3.0.0-preview</Version>
		<RuntimeIdentifiers>win-x64;linux-x64;osx-x64</RuntimeIdentifiers>
		<PublisherName>SpinSha.re</PublisherName>
		<UseAppRoot>true</UseAppRoot>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
		<IncludeAllContentForSelfExtract>true</IncludeAllContentForSelfExtract>
		<ErrorOnDuplicatePublishOutputFiles>false</ErrorOnDuplicatePublishOutputFiles>
		<ApplicationIcon>../publish/templates/win/app.ico</ApplicationIcon>
		<SelfContained>true</SelfContained>
		<PublishSingleFile>true</PublishSingleFile>
		<IncludeAllContentForSelfExtract>true</IncludeAllContentForSelfExtract>
		<EnableCompressionInSingleFile>true</EnableCompressionInSingleFile>
		<EnableDefaultContent>false</EnableDefaultContent>
		<EnableDefaultContentItems>false</EnableDefaultContentItems>
		<DebugType>embedded</DebugType>
		<GenerateEmbeddedFilesManifest>true</GenerateEmbeddedFilesManifest>
		<EmbedWwwRoot>true</EmbedWwwRoot>
	</PropertyGroup>

	<PropertyGroup Condition="'$(Configuration)'=='Release'">
		<PublishSingleFile>true</PublishSingleFile>
		<SelfContained>true</SelfContained>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="8.0.0" />
		<PackageReference Include="Microsoft.Extensions.FileProviders.Embedded" Version="8.0.3" Condition=" '$(GenerateEmbeddedFilesManifest)' == 'true' " />
		<PackageReference Include="Microsoft.Extensions.Logging" Version="8.0.0" />
		<PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
		<PackageReference Include="Photino.NET" Version="2.6.0" />
		<PackageReference Include="Photino.NET.Server" Version="1.0.0" />
		<PackageReference Include="Sentry" Version="4.2.1" />
		<PackageReference Include="SixLabors.ImageSharp" Version="3.1.3" />
		<PackageReference Include="SixLabors.ImageSharp.Drawing" Version="2.1.2" />
	</ItemGroup>

	<PropertyGroup>
		<UiRoot>UserInterface\</UiRoot>
    	<UiBuildOutput>dist\</UiBuildOutput>
		<WwwRoot Condition=" '$(EmbedWwwRoot)' != 'true' ">wwwroot\</WwwRoot>
		<WwwRoot Condition=" '$(EmbedWwwRoot)' == 'true' ">Resources\wwwroot\</WwwRoot>
	</PropertyGroup>

	<ItemGroup>
		<!-- Don't publish the UI source files, but do show them in the project files list -->
		<Content Remove="$(UiRoot)**" />
		<None Remove="$(UiRoot)**" />
		<None Include="$(UiRoot)**" Exclude="$(UiRoot)node_modules\**" />
		<None Remove="obj\**" />
		<None Remove=".github\**" />
		<Content Include="wwwroot/**" CopyToOutputDirectory="PreserveNewest" />
	</ItemGroup>

	<ItemGroup>
		<EmbeddedResource Include="Resources\**" Condition=" '$(GenerateEmbeddedFilesManifest)' == 'true' " />
		<EmbeddedResource Remove="obj\**" />
		<EmbeddedResource Remove=".github\**" />
	</ItemGroup>

	<ItemGroup>
	  <Compile Remove="obj\**" />
	  <Compile Remove=".github\**" />
	</ItemGroup>

	<Target Name="EnsureNodeEnv" BeforeTargets="BuildUserInterface" Condition=" !Exists('$(UiRoot)node_modules') ">
		<!-- Ensure Node.js is installed -->
		<Exec Command="node --version" ContinueOnError="true">
			<Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
		</Exec>
		<Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
	</Target>

	<Target Name="BuildUserInterface" BeforeTargets="BeforeBuild">
		<!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
		<Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
		<Exec WorkingDirectory="$(UiRoot)" Command="npm install" />
		<!-- <Exec WorkingDirectory="$(UiRoot)" Command="npm run generate-licenses" /> -->
		<Exec WorkingDirectory="$(UiRoot)" Command="npm run build" />
		
		<ItemGroup>
			<UiBuildOutputFiles Include="$(UiRoot)$(UiBuildOutput)**\*.*" />
		</ItemGroup>
		
		<Copy SourceFiles="@(UiBuildOutputFiles)" DestinationFiles="@(UiBuildOutputFiles->'$(WwwRoot)%(RecursiveDir)%(Filename)%(Extension)')" />

		<MakeDir Directories="$(TargetDir)\$(WwwRoot)" Condition=" '$(EmbedWwwRoot)' != 'true' And !Exists('$(TargetDir\$(WwwRoot)') " />

		<Copy SourceFiles="@(UiBuildOutputFiles)" DestinationFiles="@(UiBuildOutputFiles->'$(TargetDir)\$(WwwRoot)%(RecursiveDir)%(Filename)%(Extension)')" Condition=" '$(EmbedWwwRoot)' != 'true' " />

		<RemoveDir Directories="$(UiRoot)$(UiBuildOutput)" />
	</Target>

	<Target AfterTargets="Publish" Name="CopyPublishedSingleFile">
		<!-- Move single file application (Windows, macOS, Linux) to {{ProjectDir}}/publish/build path after build completed -->
		<ItemGroup>
			<PublishFiles Include="$(PublishDir)\**\*.*" />
		</ItemGroup>

		<Copy
			SourceFiles="@(PublishFiles)"
			DestinationFolder="$(ProjectDir)\..\publish\build\$(AssemblyName).$(Version).$(RuntimeIdentifier)\%(RecursiveDir)" />
	</Target>
</Project>
